   1              	# 1 "build/storm_startup_code.S"
   1              	        .global main                    // int main(void)
   0              	
   0              	
   2              	
   3              	        .global _etext                  // -> .data initial values in ROM
   4              	        .global _data                   // -> .data area in RAM
   5              	        .global _edata                  // end of .data area
   6              	        .global __bss_start             // -> .bss area in RAM
   7              	        .global __bss_end__             // end of .bss area
   8              	        .global _stack                  // top of stack
   9              	
  10              	// Stack Sizes
  11              	        .set  UND_STACK_SIZE, 0x00000004
  12              	        .set  ABT_STACK_SIZE, 0x00000004
  13              	        .set  FIQ_STACK_SIZE, 0x00000004
  14              	        .set  IRQ_STACK_SIZE, 0X00000080
  15              	        .set  SVC_STACK_SIZE, 0x00000004
  16              	
  17              	// Standard definitions of Mode bits and Interrupt (I & F) flags in PSRs
  18              	        .set  MODE_USR, 0x10            // User Mode
  19              	        .set  MODE_FIQ, 0x11            // FIQ Mode
  20              	        .set  MODE_IRQ, 0x12            // IRQ Mode
  21              	        .set  MODE_SVC, 0x13            // Supervisor Mode
  22              	        .set  MODE_ABT, 0x17            // Abort Mode
  23              	        .set  MODE_UND, 0x1B            // Undefined Mode
  24              	        .set  MODE_SYS, 0x1F            // System Mode
  25              	
  26              	        .equ  FIQ_BIT,  0x40            // when FIQ bit is set, FIQ is disabled
  27              	        .equ  IRQ_BIT,  0x80            // when IRQ bit is set, IRQ is disabled
  28              	
  29              	        .text
  30              	        .code 32
  31              	        .align 2
  32              	
  33              	        .global _boot
  34              	        .func   _boot
  35              	_boot:
  36              	
  37              	// Runtime Interrupt Vectors
  38              	// -------------------------
  39              	Vectors:
  40 0000 EAFFFFFE 	        b     _start                    // reset - _start
  41 0004 EA000062 	        b     und_handler               // undefined - _undf
  42 0008 EA000055 	        b     swi_handler               // SWI - _swi
  43 000c EA000048 	        b     iab_handler               // program abort - _pabt
  44 0010 EA000047 	        b     iab_handler               // data abort - _dabt
  45 0014 E1A00000 	        nop                             // reserved
  46 0018 E51FFFF0 	        ldr   pc,[pc,#-0xFF0]           // IRQ - read the VIC
  47 001c E51FFFF0 	        ldr   pc,[pc,#-0xFF0]           // FIQ - read the VIC
  48              	
  49              	#if 0
  50              	// Use this group for production
  51              	_undf:  .word _reset                    // undefined - _reset
  52              	_swi:   .word _reset                    // SWI - _reset
  53              	_pabt:  .word _reset                    // program abort - _reset
  54              	_dabt:  .word _reset                    // data abort - _reset
  55              	_irq:   .word _reset                    // IRQ - _reset
  56              	_fiq:   .word _reset                    // FIQ - _reset
  57              	
  58              	#else
  59              	// Use this group for development
  60 0020 00000038 	_undf:  .word __undf                    // undefined
  61 0024 0000003C 	_swi:   .word __swi                     // SWI
  62 0028 00000040 	_pabt:  .word __pabt                    // program abort
  63 002c 00000044 	_dabt:  .word __dabt                    // data abort
  64 0030 00000048 	_irq:   .word __irq                     // IRQ
  65 0034 0000004C 	_fiq:   .word __fiq                     // FIQ
  66              	
  67 0038 EAFFFFFE 	__undf: b     .                         // undefined
  68 003c EAFFFFFE 	__swi:  b     .                         // SWI
  69 0040 EAFFFFFE 	__pabt: b     .                         // program abort
  70 0044 EAFFFFFE 	__dabt: b     .                         // data abort
  71 0048 EAFFFFFE 	__irq:  b     .                         // IRQ
  72 004c EAFFFFFE 	__fiq:  b     .                         // FIQ
  73              	#endif
  75              	        .endfunc
  76              	
  77              	
  78              	// Setup the operating mode & stack.
  79              	// ---------------------------------
  80              	        .global _start, start, _mainCRTStartup
  81              	        .func   _start
  82              	
  83              	_start:
  84              	start:
  85              	_mainCRTStartup:
  86              	
  87              	// Initialize Interrupt System
  88              	// - Set stack location for each mode
  89              	// - Leave in System Mode with Interrupts Disabled
  90              	// -----------------------------------------------
  91 0050 E59F0228 	        ldr   r0,=_stack                    // Calc stack base
  92 0054 E10F1000 			mrs   r1,CPSR
  93 0058 E3C1107F 			bic   r1,r1,#0x7F
  94 005c E38110DB 			orr   r1,r1,#MODE_UND|IRQ_BIT|FIQ_BIT  // Change to Undefined Instruction mode
  95 0060 E129F001 	        msr   CPSR,r1
  96 0064 E1A0D000 	        mov   sp,r0                         // Store stack base
  97              	
  98 0068 E2400004 	        sub   r0,r0,#UND_STACK_SIZE         // Calc stack base
  99 006c E10F1000 			mrs   r1,CPSR
 100 0070 E3C1107F 			bic   r1,r1,#0x7F
 101 0074 E38110D7 	        orr   r1,r1,#MODE_ABT|IRQ_BIT|FIQ_BIT  // Change to Abort Mode
 102 0078 E129F001 	        msr   CPSR,r1
 103 007c E1A0D000 	        mov   sp,r0                         // Store stack base
 104              	
 105 0080 E2400004 	        sub   r0,r0,#ABT_STACK_SIZE         // Calc stack base
 106 0084 E10F1000 			mrs   r1,CPSR
 107 0088 E3C1107F 			bic   r1,r1,#0x7F
 108 008c E38110D1 	        orr   r1,r1,#MODE_FIQ|IRQ_BIT|FIQ_BIT  // Change to FIQ Mode
 109 0090 E129F001 	        msr   CPSR,r1
 110 0094 E1A0D000 	        mov   sp,r0                         // Store stack base
 111              	
 112 0098 E2400004 	        sub   r0,r0,#FIQ_STACK_SIZE         // Calc stack base
 113 009c E10F1000 			mrs   r1,CPSR
 114 00a0 E3C1107F 			bic   r1,r1,#0x7F
 115 00a4 E38110D2 	        orr   r1,r1,#MODE_IRQ|IRQ_BIT|FIQ_BIT  // Change to IRQ Mode
 116 00a8 E129F001 	        msr   CPSR,r1
 117 00ac E1A0D000 	        mov   sp,r0                         // Store stack base
 118              	
 119 00b0 E2400080 	        sub   r0,r0,#IRQ_STACK_SIZE         // Calc stack base
 120 00b4 E10F1000 			mrs   r1,CPSR
 121 00b8 E3C1107F 			bic   r1,r1,#0x7F
 122 00bc E38110D3 	        orr   r1,r1,#MODE_SVC|IRQ_BIT|FIQ_BIT  // Change to Supervisor Mode
 123 00c0 E129F001 	        msr   CPSR,r1
 124 00c4 E1A0D000 	        mov   sp,r0                         // Store stack base
 125              	
 126 00c8 E2400004 	        sub   r0,r0,#SVC_STACK_SIZE         // Calc stack base
 127 00cc E10F1000 			mrs   r1,CPSR
 128 00d0 E3C1107F 			bic   r1,r1,#0x7F
 129 00d4 E38110DF 	        orr   r1,r1,#MODE_SYS|IRQ_BIT|FIQ_BIT  // Change to System Mode
 130 00d8 E129F001 	        msr   CPSR,r1
 131 00dc E1A0D000 	        mov   sp,r0                         // Store stack base
 132              	
 133              	// Copy initialized data to its execution address in RAM
 134              	// -> not necessary, bootloader can be directly ecxecuted from ROM
 135              	// -----------------------------------------------------
 136              	//#ifdef ROM_RUN
 137              	//        ldr   r1,=_etext                // -> ROM data start
 138              	//        ldr   r2,=_data                 // -> data start
 139              	//        ldr   r3,=_edata                // -> end of data
 140              	//1:      cmp   r2,r3                     // check if data to move
 141              	//        ldrlo r0,[r1],#4                // copy it
 142              	//        strlo r0,[r2],#4
 143              	//        blo   1b                        // loop until done
 144              	//#endif
 145              	
 146              	// Clear .bss
 147              	// Hell no!
 148              	// ----------
 149              	//        mov   r0,#0                     // get a zero
 150              	//        ldr   r1,=__bss_start           // -> bss start
 151              	//        ldr   r2,=__bss_end__           // -> bss end
 152              	//2:      cmp   r1,r2                     // check if data to clear
 153              	//        strlo r0,[r1],#4                // clear 4 bytes
 154              	//        blo   2b                        // loop until done
 155              	
 156              	// Call main program: main(0)
 157              	// --------------------------
 158 00e0 E3A00000 	        mov   r0,#0                     // no arguments (argc = 0)
 159 00e4 E1A01000 	        mov   r1,r0
 160 00e8 E1A02000 	        mov   r2,r0
 161 00ec E1A0B000 	        mov   fp,r0                     // null frame pointer
 162 00f0 E1A07000 	        mov   r7,r0                     // null frame pointer for thumb
 163 00f4 E59FA188 	        ldr   r10,=main
 164 00f8 E1A0E00F 	        mov   lr,pc
 165 00fc E12FFF1A 	        bx    r10                       // enter main()
 166              	
 168              	        .endfunc
 169              	
 170              	        .global _reset, reset, exit, abort
 171              	        .func   _reset
 172              	_reset:
 173              	reset:
 174              	exit:
 175              	abort:
 176              	
 177 0100 EAFFFFFE 	        b     .                         // loop until reset
 178              	
 179              	// Data Fetch Abort Interrupt Handler
 180              	// -------------------------------------------------------------------
 181              	dab_handler:
 182 0104 E1A0D00E 			mov   r13, lr
 183 0108 E3A04010 			mov   r4, #16
 184 010c EE0D4F1D 			mcr   p15, 0, r4, c13, c13, 0
 185 0110 E3A0403C 			mov   r4, #'<'
 186 0114 EB000051 			bl    uart0_send_byte
 187 0118 E3A04044 			mov   r4, #'D'
 188 011c EB00004F 			bl    uart0_send_byte
 189 0120 E3A04041 			mov   r4, #'A'
 190 0124 EB00004D 			bl    uart0_send_byte
 191 0128 E3A04042 			mov   r4, #'B'
 192 012c EB00004B 			bl    uart0_send_byte
 193 0130 EA000022 			b     isr_handler
 194              	
 195              	// Instruction Fetch Abort Interrupt Handler
 196              	// -------------------------------------------------------------------
 197              	iab_handler:
 198 0134 E1A0D00E 			mov   r13, lr
 199 0138 E3A04020 			mov   r4, #32
 200 013c EE0D4F1D 			mcr   p15, 0, r4, c13, c13, 0
 201 0140 E3A0403C 			mov   r4, #'<'
 202 0144 EB000045 			bl    uart0_send_byte
 203 0148 E3A04049 			mov   r4, #'I'
 204 014c EB000043 			bl    uart0_send_byte
 205 0150 E3A04041 			mov   r4, #'A'
 206 0154 EB000041 			bl    uart0_send_byte
 207 0158 E3A04042 			mov   r4, #'B'
 208 015c EB00003F 			bl    uart0_send_byte
 209 0160 EA000016 			b     isr_handler
 210              	
 211              	// Software Interrupt Handler
 212              	// -------------------------------------------------------------------
 213              	swi_handler:
 214 0164 E1A0D00E 			mov   r13, lr
 215 0168 E3A04040 			mov   r4, #64
 216 016c EE0D4F1D 			mcr   p15, 0, r4, c13, c13, 0
 217 0170 E3A0403C 			mov   r4, #'<'
 218 0174 EB000039 			bl    uart0_send_byte
 219 0178 E3A04053 			mov   r4, #'S'
 220 017c EB000037 			bl    uart0_send_byte
 221 0180 E3A04057 			mov   r4, #'W'
 222 0184 EB000035 			bl    uart0_send_byte
 223 0188 E3A04049 			mov   r4, #'I'
 224 018c EB000033 			bl    uart0_send_byte
 225 0190 EA00000A 			b     isr_handler
 226              	
 227              	// Undefined Instruction Interrupt Handler
 228              	// -------------------------------------------------------------------
 229              	und_handler:
 230 0194 E1A0D00E 			mov   r13, lr
 231 0198 E3A04080 			mov   r4, #128
 232 019c EE0D4F1D 			mcr   p15, 0, r4, c13, c13, 0
 233 01a0 E3A0403C 			mov   r4, #'<'
 234 01a4 EB00002D 			bl    uart0_send_byte
 235 01a8 E3A04055 			mov   r4, #'U'
 236 01ac EB00002B 			bl    uart0_send_byte
 237 01b0 E3A0404E 			mov   r4, #'N'
 238 01b4 EB000029 			bl    uart0_send_byte
 239 01b8 E3A04044 			mov   r4, #'D'
 240 01bc EB000027 			bl    uart0_send_byte
 241              	
 242              	// Interrupt Handler
 243              	// -------------------------------------------------------------------
 244              	isr_handler:
 245 01c0 E3A0402D 			mov   r4, #'-'
 246 01c4 EB000025 			bl    uart0_send_byte
 247 01c8 E3A04049 			mov   r4, #'I'
 248 01cc EB000023 			bl    uart0_send_byte
 249 01d0 E3A0404E 			mov   r4, #'N'
 250 01d4 EB000021 			bl    uart0_send_byte
 251 01d8 E3A04054 			mov   r4, #'T'
 252 01dc EB00001F 			bl    uart0_send_byte
 253 01e0 E3A04020 			mov   r4, #' '
 254 01e4 EB00001D 			bl    uart0_send_byte
 255 01e8 E3A04040 			mov   r4, #'@'
 256 01ec EB00001B 			bl    uart0_send_byte
 257              	
 258 01f0 E24D7004 			sub   r7, r13, #4
 259 01f4 EB00000A 			bl    uart0_print_hex
 260              	
 261 01f8 E3A04020 			mov   r4, #' '
 262 01fc EB000017 			bl    uart0_send_byte
 263 0200 E3A0405B 			mov   r4, #'['		
 264 0204 EB000015 			bl    uart0_send_byte
 265              	
 266 0208 EE197F19 			mrc   p15,0,r7, c9, c9
 267 020c EB000004 			bl    uart0_print_hex
 268              	
 269 0210 E3A0405D 			mov   r4, #']'
 270 0214 EB000011 			bl    uart0_send_byte
 271 0218 E3A0403E 			mov   r4, #'>'
 272 021c EB00000F 			bl    uart0_send_byte
 273 0220 EAFFFFFE 			b .
 274              	
 275              	
 276              	// Send 32-bit HEX value via UART0
 277              	// -------------------------------------------------------------------
 278              	uart0_print_hex:
 279 0224 E1A0900E 			mov   r9, lr // save link register
 280 0228 E3A08020 			mov   r8, #32
 281              	
 282              	uart0_print_hex_loop:
 283 022c E3580000 			cmp   r8, #0
 284 0230 01A0F009 			moveq pc, r9
 285              	
 286 0234 E2488004 			sub   r8, r8, #4
 287 0238 E1A06837 			mov   r6, r7, lsr r8 // isolate 4-bit value
 288 023c E206600F 			and   r6, r6, #0x0F
 289              	
 290 0240 E3560009 			cmp   r6, #9
 291 0244 CA000001 			bgt   adapt_char
 292 0248 E2864030 			add   r4, r6, #'0'
 293              	
 294 024c EA000001 			b     uart0_print_hex_char
 295              	adapt_char:
 296 0250 E246600A 			sub   r6, r6, #10
 297 0254 E2864041 			add   r4, r6, #'A'
 298              	
 299              	uart0_print_hex_char:
 300 0258 EB000000 			bl    uart0_send_byte
 301 025c EAFFFFF2 			b     uart0_print_hex_loop
 302              	
 303              	
 304              	// Send one char via UART0
 305              	// -------------------------------------------------------------------
 306              	uart0_send_byte:
 307 0260 E59F0020 			ldr   r0, =(0xFFFF001C)
 308 0264 E5900000 			ldr   r0, [r0]
 309 0268 E2000001 			and   r0, r0, #0x01
 310 026c E3500000 			cmp   r0, #0
 311 0270 0AFFFFFA 			beq   uart0_send_byte
 312 0274 E59F0010 			ldr   r0, =(0xFFFF0018)
 313 0278 E5804000 			str   r4, [r0]
 314 027c E1A0F00E 			mov   pc, lr
 315              	
 316              	
 318              	        .endfunc
 319              	
 320 0280 00000000 	        .end
 320      00000000 
 320      FFFF001C 
 320      FFFF0018 
DEFINED SYMBOLS
build/storm_startup_code.S:11     *ABS*:00000004 UND_STACK_SIZE
build/storm_startup_code.S:12     *ABS*:00000004 ABT_STACK_SIZE
build/storm_startup_code.S:13     *ABS*:00000004 FIQ_STACK_SIZE
build/storm_startup_code.S:14     *ABS*:00000080 IRQ_STACK_SIZE
build/storm_startup_code.S:15     *ABS*:00000004 SVC_STACK_SIZE
build/storm_startup_code.S:18     *ABS*:00000010 MODE_USR
build/storm_startup_code.S:19     *ABS*:00000011 MODE_FIQ
build/storm_startup_code.S:20     *ABS*:00000012 MODE_IRQ
build/storm_startup_code.S:21     *ABS*:00000013 MODE_SVC
build/storm_startup_code.S:22     *ABS*:00000017 MODE_ABT
build/storm_startup_code.S:23     *ABS*:0000001b MODE_UND
build/storm_startup_code.S:24     *ABS*:0000001f MODE_SYS
build/storm_startup_code.S:26     *ABS*:00000040 FIQ_BIT
build/storm_startup_code.S:27     *ABS*:00000080 IRQ_BIT
build/storm_startup_code.S:31     .text:00000000 $a
build/storm_startup_code.S:35     .text:00000000 _boot
build/storm_startup_code.S:39     .text:00000000 Vectors
build/storm_startup_code.S:83     .text:00000050 _start
build/storm_startup_code.S:229    .text:00000194 und_handler
build/storm_startup_code.S:213    .text:00000164 swi_handler
build/storm_startup_code.S:197    .text:00000134 iab_handler
build/storm_startup_code.S:60     .text:00000020 _undf
build/storm_startup_code.S:60     .text:00000020 $d
build/storm_startup_code.S:67     .text:00000038 __undf
build/storm_startup_code.S:61     .text:00000024 _swi
build/storm_startup_code.S:68     .text:0000003c __swi
build/storm_startup_code.S:62     .text:00000028 _pabt
build/storm_startup_code.S:69     .text:00000040 __pabt
build/storm_startup_code.S:63     .text:0000002c _dabt
build/storm_startup_code.S:70     .text:00000044 __dabt
build/storm_startup_code.S:64     .text:00000030 _irq
build/storm_startup_code.S:71     .text:00000048 __irq
build/storm_startup_code.S:65     .text:00000034 _fiq
build/storm_startup_code.S:72     .text:0000004c __fiq
build/storm_startup_code.S:67     .text:00000038 $a
build/storm_startup_code.S:84     .text:00000050 start
build/storm_startup_code.S:85     .text:00000050 _mainCRTStartup
build/storm_startup_code.S:172    .text:00000100 _reset
build/storm_startup_code.S:173    .text:00000100 reset
build/storm_startup_code.S:174    .text:00000100 exit
build/storm_startup_code.S:175    .text:00000100 abort
build/storm_startup_code.S:181    .text:00000104 dab_handler
build/storm_startup_code.S:306    .text:00000260 uart0_send_byte
build/storm_startup_code.S:244    .text:000001c0 isr_handler
build/storm_startup_code.S:278    .text:00000224 uart0_print_hex
build/storm_startup_code.S:282    .text:0000022c uart0_print_hex_loop
build/storm_startup_code.S:295    .text:00000250 adapt_char
build/storm_startup_code.S:299    .text:00000258 uart0_print_hex_char
build/storm_startup_code.S:320    .text:00000280 $d
                   .debug_aranges:0000000c $d

UNDEFINED SYMBOLS
main
_etext
_data
_edata
__bss_start
__bss_end__
_stack
